{"version":3,"file":"vendor.bizcharts.18d481d0cca3dd93ed7b.chunk.js","mappings":"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","sources":["webpack://rewards-catalog/../src/polar.js"],"sourcesContent":["/**\n * @fileOverview the class of Polar Coordinate\n * @author sima.zhang\n */\nconst MatrixUtil = require('@antv/util/lib/matrix/');\nconst isNumberEqual = require('@antv/util/lib/math/is-number-equal');\nconst mix = require('@antv/util/lib/mix');\nconst Base = require('./base');\n\nconst mat3 = MatrixUtil.mat3;\nconst vec2 = MatrixUtil.vec2;\nconst vec3 = MatrixUtil.vec3;\n\nclass Polar extends Base {\n\n  getDefaultCfg() {\n    const cfg = super.getDefaultCfg();\n    return mix({}, cfg, {\n      startAngle: -Math.PI / 2,\n      endAngle: Math.PI * 3 / 2,\n      innerRadius: 0,\n      type: 'polar',\n      isPolar: true\n    });\n  }\n\n  constructor(cfg) {\n    super(cfg);\n    this._init();\n  }\n\n  _init() {\n    let radius = this.radius;\n    const innerRadius = this.innerRadius;\n    const center = this.center;\n    const startAngle = this.startAngle;\n\n    let endAngle = this.endAngle;\n    while (endAngle < startAngle) {\n      endAngle += (Math.PI * 2);\n    }\n    this.endAngle = endAngle;\n    const oneBox = this.getOneBox();\n\n    const oneWidth = oneBox.maxX - oneBox.minX;\n    const oneHeight = oneBox.maxY - oneBox.minY;\n    const left = Math.abs(oneBox.minX) / oneWidth;\n    const top = Math.abs(oneBox.minY) / oneHeight;\n    const width = this.width;\n    const height = this.height;\n    let maxRadius;\n    let circleCentre;\n    if ((height / oneHeight) > (width / oneWidth)) { // width为主\n      maxRadius = width / oneWidth;\n      circleCentre = {\n        x: center.x - (0.5 - left) * width,\n        y: center.y - (0.5 - top) * maxRadius * oneHeight\n      };\n    } else { // height为主\n      maxRadius = height / oneHeight;\n      circleCentre = {\n        x: center.x - (0.5 - left) * maxRadius * oneWidth,\n        y: center.y - (0.5 - top) * height\n      };\n    }\n\n    if (!radius) {\n      radius = maxRadius;\n    } else if (radius > 0 && radius <= 1) {\n      radius = maxRadius * radius;\n    } else if (radius <= 0 || radius > maxRadius) {\n      radius = maxRadius;\n    }\n\n    const x = {\n      start: startAngle,\n      end: endAngle\n    };\n\n    const y = {\n      start: innerRadius * radius,\n      end: radius\n    };\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.circleCentre = circleCentre;\n    this.center = circleCentre;\n  }\n\n  getCenter() {\n    return this.circleCentre;\n  }\n\n  getOneBox() {\n    const startAngle = this.startAngle;\n    const endAngle = this.endAngle;\n    if (Math.abs(endAngle - startAngle) >= Math.PI * 2) {\n      return {\n        minX: -1,\n        maxX: 1,\n        minY: -1,\n        maxY: 1\n      };\n    }\n    const xs = [ 0, Math.cos(startAngle), Math.cos(endAngle) ];\n    const ys = [ 0, Math.sin(startAngle), Math.sin(endAngle) ];\n\n    for (let i = Math.min(startAngle, endAngle); i < Math.max(startAngle, endAngle); i += Math.PI / 18) {\n      xs.push(Math.cos(i));\n      ys.push(Math.sin(i));\n    }\n\n    return {\n      minX: Math.min.apply(Math, xs),\n      maxX: Math.max.apply(Math, xs),\n      minY: Math.min.apply(Math, ys),\n      maxY: Math.max.apply(Math, ys)\n    };\n  }\n\n  getRadius() {\n    return this.radius;\n  }\n\n  convertPoint(point) {\n    const center = this.getCenter();\n    let x = this.isTransposed ? point.y : point.x;\n    let y = this.isTransposed ? point.x : point.y;\n\n    x = this.convertDim(x, 'x');\n    y = this.convertDim(y, 'y');\n\n    return {\n      x: center.x + Math.cos(x) * y,\n      y: center.y + Math.sin(x) * y\n    };\n  }\n\n  invertPoint(point) {\n    const center = this.getCenter();\n    const vPoint = [ point.x - center.x, point.y - center.y ];\n    const x = this.x;\n    const m = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n    mat3.rotate(m, m, x.start);\n\n    let vStart = [ 1, 0, 0 ];\n    vec3.transformMat3(vStart, vStart, m);\n    vStart = [ vStart[0], vStart[1] ];\n    let angle = vec2.angleTo(vStart, vPoint, x.end < x.start);\n    if (isNumberEqual(angle, Math.PI * 2)) {\n      angle = 0;\n    }\n    const radius = vec2.length(vPoint);\n\n    let xPercent = angle / (x.end - x.start);\n    xPercent = x.end - x.start > 0 ? xPercent : -xPercent;\n\n    const yPercent = this.invertDim(radius, 'y');\n    const rst = {};\n    rst.x = this.isTransposed ? yPercent : xPercent;\n    rst.y = this.isTransposed ? xPercent : yPercent;\n    return rst;\n  }\n}\n\nmodule.exports = Polar;\n"],"names":["require","Polar","mix","exports","name","startAngle","endAngle","innerRadius","getter","isPolar","__nested_webpack_require_623__","module","object","property","Utils","oneWidth","minX","G","__nested_webpack_require_3064__","Util","width","height","circleCentre","oneHeight","maxRadius","x","center","y","top","left","bottom","radius","padding","right","end","start","plotRange","tl","br","clip","maxX","minY","maxY","min","ys","Math","CommonUtil","xs","k","v","Param","c","mixins","isTransposed","point","attrs","convertDim","temp","cos","mat3","rotate","__nested_webpack_require_5830__","vec3","transformMat3","angle","xPercent","yPercent","invertDim","mixin","rst","Base"],"sourceRoot":""}